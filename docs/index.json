[{"content":"\nHandmake your Git commands at home Long story short, you can extend Git\u0026rsquo;s functionality by creating your own custom commands! It\u0026rsquo;s simpler than you think. Here are 3 steps:\nCreate an executable binary to do the things you want your git command to do. This could be a shell script, or a program in any language. Name it git-\u0026lt;command-name\u0026gt;. For example, if you want a command called git cleanup-branches, you\u0026rsquo;d name your script git-cleanup-branches. Put it in your $PATH and make it executable (chmod +x /path/to/your/script). Now you can use your new Git power via:\ngit \u0026lt;command-name\u0026gt; [arg-1] [arg-2]\nPretty neat, huh? ðŸ˜Ž\nSome tips: /usr/local/bin/ is often a good place to store your personal binaries, as it\u0026rsquo;s usually in your system\u0026rsquo;s default PATH. To update $PATH you can edit shell config files. (like ~/.bashrc for Bash or ~/.zshrc for Zsh).\nJust add a line like this, replacing /your-directory/my-git-custom-commands with the actual path to where you store your scripts:\nPATH=$PATH:/your-directory/my-git-custom-commands\nDon\u0026rsquo;t forget to source your shell\u0026rsquo;s config file (e.g., source ~/.bashrc or source ~/.zshrc) or open a new terminal for the changes to take effect. Walking through an example: Let\u0026rsquo;s look at a real-world example of a handy custom Git command: git-ignore-local Repo: https://github.com/immortalcodes/git-ignore-local.\nThis tool addresses a common annoyance: sometimes you want to ignore files in your local Git repository without adding them to the project\u0026rsquo;s .gitignore file. This is perfect for machine-specific configurations, temporary debug logs, or IDE-generated files that clutter your workspace but shouldn\u0026rsquo;t be shared.\nThe git-ignore-local tool, as described in its README, cleverly uses Git\u0026rsquo;s .git/info/exclude file to achieve this. Here\u0026rsquo;s a quick rundown of how it works and why it\u0026rsquo;s so useful:\nNo more .gitignore conflicts for local ignores: You can keep your personal ignore rules separate from the team\u0026rsquo;s shared rules. Easy to add and remove: Just use git ignore-local \u0026lt;file_or_pattern\u0026gt; to add an ignore rule and git ignore-local --restore \u0026lt;file_or_pattern\u0026gt; to remove one. Keeps your repository clean: Avoid committing files that are only relevant to your local development environment. Imagine you\u0026rsquo;re working on a project and your IDE creates a .idea/ folder. You don\u0026rsquo;t want to commit this to the main repository, but constantly seeing untracked files is distracting. With git ignore-local .idea/, problem solved! âœ¨\nThe git-ignore-local project provides clear instructions on how to install it, either by downloading a pre-built binary or building it yourself. Once installed (typically by copying the executable to /usr/local/bin/ and making it executable), you can use it just like any other Git command:\nIgnoring files:\ngit ignore-local .env logs/debug.log\nRestoring (unignoring) files:\ngit ignore-local --restore logs/debug.log\nThis git-ignore-local example perfectly illustrates the power of creating your own Git commands. It solves a specific problem in a clean and efficient way, integrating seamlessly with Git\u0026rsquo;s existing workflow.\nSo, what Git annoyances do you encounter regularly? Maybe it\u0026rsquo;s time to handmake your own Git command to conquer them! Get creative and happy scripting! ðŸš€\n","permalink":"https://immortalcodes.github.io/posts/handmade-git-commands/","summary":"\u003cp\u003e\u003cimg alt=\"Custom git commands\" loading=\"lazy\" src=\"/images/custom-git-commands.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"handmake-your-git-commands-at-home\"\u003eHandmake your Git commands at home\u003c/h2\u003e\n\u003cp\u003eLong story short, you can extend Git\u0026rsquo;s functionality by creating your own custom commands! It\u0026rsquo;s simpler than you think. Here are 3 steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate an \u003cstrong\u003eexecutable binary\u003c/strong\u003e to do the things you want your git command to do. This could be a shell script, or a program in any language.\u003c/li\u003e\n\u003cli\u003eName it \u003ccode\u003egit-\u0026lt;command-name\u0026gt;\u003c/code\u003e. For example, if you want a command called \u003ccode\u003egit cleanup-branches\u003c/code\u003e, you\u0026rsquo;d name your script \u003ccode\u003egit-cleanup-branches\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePut it in your \u003cstrong\u003e$PATH\u003c/strong\u003e and make it executable (\u003ccode\u003echmod +x /path/to/your/script\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow you can use your new Git power via:\u003c/p\u003e","title":"Handmade Git Commands"},{"content":"\nUnder the Hood of React: Why It Feels Like Magic (But Isnâ€™t) Why this Blog Back in school days starting with web development was fairly simple â€” HTML formed the structure, CSS was all beautiful decorations (and some movements), and JS brought logic and life to the site.\nBut, as any dev would have it, I encountered React. And oh boy, it seemed magical â€” yes, almost like you now know the language of elves and can now craft spectacular Elden sites.\nThis was awesome, but the engineer within me was curious, I had this tickling feeling to know what is under the hood of React.\nI dived deep and was amazed by the mechanisms behind those state changes and process of DOM painting! Itâ€™s one of those feelings like a person has for their car. Sure, they only need to know how to drive it, but knowing how things work under the hood just elevates your level and you really own the machine.\nThis blog is about going under the hood of React! (React 16+) Why We Needed React Before React, we relied on servers to cook up the HTML and serve it whenever a button was clicked or a transition was expected (reason why we used preventDefault()). This is SSR (Server Side Rendering), where we prepare HTML files in the backend and serve them every time user demands something, examples include templating engines like JINJA and TWIG (PHP). But that wasn\u0026rsquo;t the era of Starlink satellites shipping fast internet across the world â€” it took time to load entire pages from the server. Time was progressing and people had more powerful devices on client side and that meant that now logic could operate on client and move things.\nFacebook (Gen Z name: META) was facing challenges in maintaining its News Feed, which was experiencing rapid growth and complexity.\nThe idea was â€” what if DOM manipulation could be done efficiently on the client side with compute-optimized algorithms?\nVoila! That is the core idea behind React. React was initially deployed on Facebookâ€™s News Feed in 2011, then on Instagram in 2012, and was later open-sourced!\nSites nowadays While I talk about SSR and client side computations, they are not two far ends in today\u0026rsquo;s scenario, they form a spectrum where application/sites choose what they need to compute at servers and what they need for clients to handle, it\u0026rsquo;s far too complex and practically no tech-stack is exactly a CSR or SSR, they all fall in between somewhere of this vast spectrum.\nafter this section I assume you are already familiar with using react for development purposes\nBaby Steps First!! Food for thought:\nThe broader idea is that we need a logic that reacts when interactions happen on web. It needs a structure to know what elements are there on the page, what things could change or be interacted with? How to know changes are required on a webpage? Strategize and optimally apply changes when they are needed? All this and more has to happen quickly, consuming low memory space and the entire transition should be seamless. Before we dive into the complex mechanism behind React, it is necessary to know some intermediate terms and concepts.\nFiber Tree With React 16, the Fiber architecture was introduced. It is basically a linked list of Fiber nodes where each node represents:\nThe component type (class, function, host) Its instance/state Input props Output elements Links to parent, child, and sibling fibers Relation to the work-in-progress alternate fiber Effect flags indicating DOM operations needed Lanes indicating the priority of the update Batching information Did you see what we did there? We can group the information stored in a fiber as:\nA virtual representation of the actual DOM element Info about its parents and siblings State information and actions to be performed Optimization information for React Engine (Batching and Priority) React keeps two trees for every trigger:\ncurrent â†’ the tree currently committed to the DOM workInProgress â†’ the tree being prepared for the next commit Reconciliation Process Before we discuss this, you need to know what a trigger is â€” in simple terms, a change. That is the philosophy of React: to react to a change.\nSome button was pressed, things were loaded, notifications sent, forms submitted â€” could be anything.\nSo, how do we decide what this change should do to our browser screen (the pixels a user sees)? The reconciliation process is (donâ€™t worry if it doesnâ€™t all make sense on the first read):\nIdentifying the change Determining the most optimized steps that should be added to the Fiber tree Adding the steps to the corresponding nodes Assumptions Element Types: React assumes that elements of different types generate different DOM trees. Key Prop: Developers can use the key prop to hint which child elements remain stable across renders. This helps React efficiently reorder, reuse, and re-render DOM nodes. Reconciliation vs Rendering The DOM is just one rendering environment React can target â€” others include native iOS and Android views via React Native.\nThis is why \u0026ldquo;Virtual DOM\u0026rdquo; is a bit of a misnomer.\nReact is designed so that reconciliation and rendering are separate phases:\nThe reconciler computes which parts of the tree have changed. The renderer uses that information to update the UI. Rendering is more like painting the web.\nDouble Buffering Double buffering, a technique used in graphics and video processing, minimizes flickering and improves performance. It involves using two memory spaces to store images or frames and switching between them to display the final image smoothly.\nIn Reactâ€™s Fiber reconciliation, a similar approach is taken:\nWhen updates occur, a new Fiber tree is created to represent the updated UI state. Once this new tree reflects the expected UI, it replaces the current tree â€” similar to how video buffers are swapped. Benefits: Improved performance and reduced flickering by avoiding unnecessary updates to the real DOM Ability to compute the new UI state off-screen, allowing for easy discarding if a higher-priority update arises Seamless pausing and resuming of reconciliation without disrupting the userâ€™s view ðŸ”„ The Entire Cycle Or view the full diagram here\nI highly encourage you to visit the diagram and make sense out of it. React is fairly mature now and it has tons of complexity, this blog is over-simplified view of the entire thing. Right place to dive deep is some links given below and finally the codebase itself!\nHaving said that, let me throw some light:\nIt all starts with mounting that is when the react page loads for the first time, based on what components and code has been used it forms a Virtual DOM representation which is complemented by Fiber Tree that actually stores real semantics and information of those components.\nWhen all this is formed we move to Commit phase and all this information is painted in an instant on the webpage that is the real DOM as we discussed in the concept of Double Buffering. Since all the computations are already done and dusted, the painting phase is real quick and seamless.\nNow the interesting part..\nWhen a trigger happens which is basically a change that React is configured to \u0026ldquo;react\u0026rdquo; to, a new virtual representation is formed to compare if we need to go ahead and change something on DOM. Trigger doesn\u0026rsquo;t mean that a change has to happen in DOM, which is a re-rendering has to be done, for example, if there was a button to set the counter to 0 and the counter was already 0, no change is required to be reflected on the web or the tree structure itself and react optimizes and avoids re-rendering in such cases.\nIf there are changes we enter reconciliation process to compare current and work-in-progress trees to determine what needs to be changed, where should those changes be implemented and stored in the tree so that entire transition happens in a very optimal way. The process of determining this itself is quite compute efficient. With react (18+), several new features were added to this process:\nAutomatic Batching Concurrent Rendering Priority-based Updates Suspense Improvements All of them are possible due to heavy lifting done on fiber tree structures. Fiber tree supports play-and-pause functionality where updates to the tree could be prioritized, paused or aborted.\nOnce we have done all this computations on our WIP tree which now has an update queue with all the updates that need to be painted on actual web, we start the committing phase where tree is traversed using a bottom up approach and changes make it to actual DOM.\nAll this happens trigger after trigger giving a seamless experience to user despite such heavy computations and complexities.\nAcknowledgements I am really thankful to people who were generous and propagated their knowledge on free web. These references were really helpful in understanding workings inside react. Do check them out!\nhttps://github.com/facebook/react https://github.com/acdlite/react-fiber-architecture https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/React/Virtual-DOM-and-Reconciliation-Algorithm.md https://stackoverflow.com/questions/78909355/react-and-reconciliation-process/78909508#78909508 https://legacy.reactjs.org/docs/reconciliation.html https://www.velotio.com/engineering-blog/react-fiber-algorithm https://github.com/koba04/react-fiber-resources https://angular.love/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react#Pre-mutation%20lifecycle%20methods ","permalink":"https://immortalcodes.github.io/posts/react-is-no-magic/","summary":"\u003cp\u003e\u003cimg alt=\"React Cover\" loading=\"lazy\" src=\"/images/react_cover_2.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"under-the-hood-of-react-why-it-feels-like-magic-but-isnt\"\u003eUnder the Hood of React: Why It Feels Like Magic (But Isnâ€™t)\u003c/h1\u003e\n\u003ch2 id=\"why-this-blog\"\u003eWhy this Blog\u003c/h2\u003e\n\u003cp\u003eBack in school days starting with web development was fairly simple â€” HTML formed the structure, CSS was all beautiful decorations (and some movements), and JS brought logic and life to the site.\u003c/p\u003e\n\u003cp\u003eBut, as any dev would have it, I encountered React. And oh boy, it seemed magical â€” yes, almost like you now know the language of elves and can now craft spectacular \u003cem\u003eElden sites\u003c/em\u003e.\u003c/p\u003e","title":"React â‰  Magic"}]